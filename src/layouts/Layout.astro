---
import { ViewTransitions } from "astro:transitions";
import Navbar from "../components/NavBar/Navbar.astro";
import Footer from "../components/Footer.astro";
import { getLangFromUrl } from "@/components/i18n/utils";

interface Props {
  title: string;
}

const { title } = Astro.props;
const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/icon/playD.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <ViewTransitions />
    <!-- <Navbar /> -->
    <slot />
    <!-- <Footer /> -->
  </body>
</html>

<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
    --tw-bg-opacity: 1;
    /* background-color: rgb(2 6 23 / var(--tw-bg-opacity)); */
    background-color: #1d1e26;
  }
  html {
    font-family: system-ui, sans-serif;
    color: #eee;
    overflow-y: auto;
    overflow-x: hidden;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  .icon-animated {
    fill-opacity: 0;
    stroke-dasharray: 1300;
    stroke-dashoffset: 1300;
    animation: dash 1s ease-in forwards;
  }

  @keyframes dash {
    70% {
      fill-opacity: 0;
    }

    100% {
      fill-opacity: 100%;
      stroke-dashoffset: 0;
      stroke-width: 1;
    }
  }
</style>

<script>
  import { aosInit } from "../utils/aos.script";
  aosInit();
</script>

<!-- Animatation Other Platforms icons -->
<script type="module">
  document.addEventListener("DOMContentLoaded", function () {
    const svgs = document.querySelectorAll(".icon-animated");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.style.animation = "none";
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                entry.target.style.animation = "dash 1s ease-in forwards";
              });
            });
          }
        });
      },
      {
        threshold: 0.5,
      }
    );

    svgs.forEach((svg) => observer.observe(svg));
  });
</script>
